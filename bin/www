#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('skfiresystem:server');
var http = require('http');

const jwt = require('jsonwebtoken');
var socketIo = require('socket.io');
var socketioJwt = require('socketio-jwt');

const config = require('../environment/config');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Socket.io for Authorised JWT enabling the connection
 */
var sio = socketIo.listen(server);
// require('../environment/passport_jwt_socketio')(sio);

sio.use(function(socket, next){
  if (socket.handshake.query && socket.handshake.query.token){
    // console.log(socket.handshake);
    jwt.verify(socket.handshake.query.token, config.mongodb.secret, function(err, decoded) {
      if(err) {
        console.log('Error on JWT Token Handshake');
        return next(new Error('Authentication error'));
      }
      // console.log(decoded);
      socket.decoded_token = decoded;
      next();
    });
  } else {
      next(new Error('Authentication error'));
  }    
});

sio.sockets.on('connection', function(socket) {
    // Connection now authenticated to receive further events
    socket.on('Chat Message', function(message) {
        socket.emit('Chat Message', message);
    });
    socket.emit('success', {
      message: 'success logged in!',
      user: socket.decoded_token.username,
      logged_in:socket.decoded_token.email
    });
});



// sio.set('authorization', socketioJwt.authorize({
//   secret: config.mongodb.secret,
//   handshake: true
// }));

// sio.sockets
//   .on('connection', function (socket) {
//      console.log(socket.handshake, 'connected');
//      //socket.on('event');
//   });

// set authorization for socket.io
// sio.sockets
//   .on('connection', socketioJwt.authorize({
//     secret: config.mongodb.secret,
//     timeout: 15000 // 15 seconds to send the authentication message
//   })).on('authenticated', function(socket) {
//     //this socket is authenticated, we are good to handle more events from it.
//     console.log('hello! ' + socket.decoded_token.name);
//   }).on('unauthorised',()=>{
//     console.log('hello! not authorised');
//   });


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on Port ' + port);
}
